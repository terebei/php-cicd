
---

name: cloudrun-deploy

on:
  workflow_call:
  
jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: self-hosted
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to the Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup ENV
      run: |
        export ENV=development
        if echo "$GITHUB_REF_NAME" | grep -q "^dev-.*";  then export ENV=development; fi
        if echo "$GITHUB_REF_NAME" | grep -q "^stg-.*";  then export ENV=staging; fi
        if echo "$GITHUB_REF_NAME" | grep -q "^prod-.*"; then export ENV=production; fi
        export APP_NAME=`echo ${GITHUB_REPOSITORY#*/} | tr '[:upper:]' '[:lower:]'`
        export APP_NAME="${APP_NAME//_/-}"
        
        export IMAGE_NAME=`echo ghcr.io/${GITHUB_REPOSITORY_OWNER}/${APP_NAME} | tr '[:upper:]' '[:lower:]'`
        echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV
        echo "ENV=${ENV}" >> $GITHUB_ENV
        echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
        echo "TAG=${GITHUB_REF_NAME}" >> $GITHUB_ENV
        
        export CNT_NAME="${ENV}-${APP_NAME}"
        echo "CNT_NAME=${CNT_NAME}" >> $GITHUB_ENV
        
    - name: Get config files 
      run: |
      
        touch composer.json
        VERSION=$(grep '"php"' composer.json | awk '{ print $3 }' | tr -d '"^' | cut -d . -f 1,2)
        PHP_VERSION=${VERSION:-7.4}
        export CNT_NAME=${{ env.CNT_NAME }}

        echo $CNT_NAME
        
        DOCKERFILE_URL=https://raw.githubusercontent.com/terebei/php-cicd/main/Dockerfile
        wget $DOCKERFILE_URL -O Dockerfile
        
        sed -i "s/PHP_VERSION/${PHP_VERSION}/" Dockerfile 
        sed -i "s/APP_NAME/${CNT_NAME}/" Dockerfile
        
        mkdir -p conf.d
        cd conf.d
        # wget https://gist.githubusercontent.com/jvkassi/2b43be97533651ffb6b6e7882aac4354/raw/7465bafaf255f52cb55dbec5ec4539d310888dd6/elastic-apm-custom.ini
        wget https://gist.githubusercontent.com/jvkassi/5567ef06dfcddf5cbfb8e9ccba143a14/raw/12a4e82431d376c05c7f8491f42a3bcf507e04f4/apache-security.conf -O security.conf
        wget https://gist.githubusercontent.com/jvkassi/7814e44f94d05ad1ad5cf00d335ac9d2/raw/07845b99dcf7260d71b03a970395847b371d2350/terebei-php-ini -O security.ini
        

        # sed -i "s/php/${APP_NAME}/" elastic-apm-custom.ini
        #sed -i "s/R_ENVIRONNEMENT/${{ env.ENV }}/" elastic-apm-custom.ini
           
    # Build the Docker image
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: "${{ env.IMAGE_NAME }}:${{ env.TAG }}"
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NEW_RELIC_AGENT_VERSION=10.10.0.1
          NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }}
  # NEW_RELIC_APPNAME=${{ env.CNT_NAME }}
  # IMAGE_NAME=${{ env.CNT_NAME }}
#         tags: "${{ env.IMAGE_NAME }}:${{ env.ENV}},${{ env.IMAGE_NAME }}:${{ env.TAG }}"

      # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
        export APP_DOMAIN=ovh.syabe-tech.com
        export CNT_NAME=${{ env.CNT_NAME }}

        TRAEFIK_RULE="Host(\`${{ env.APP_NAME }}-${{ env.ENV }}.${APP_DOMAIN}\`)"

        docker rm -f ${CNT_NAME}
        docker run -d --network proxy --name ${CNT_NAME} \
         -e PORT=80 --label traefik.enable=true \
         --label co.elastic.logs/fileset.stdout=access --label co.elastic.logs/fileset.stderr=error \
         --label co.elastic.logs/module=apache \
         --label traefik.docker.network=proxy \
         --label environment=${{ env.ENV }} \
         --label traefik.http.routers.${CNT_NAME}.rule=$TRAEFIK_RULE \
         --label traefik.http.routers.${CNT_NAME}.service=${CNT_NAME} \
         --label traefik.http.routers.${CNT_NAME}.entrypoints=http,https \
         --label traefik.http.services.${CNT_NAME}.loadbalancer.server.port=80 \
          -v /srv/docker-data/${CNT_NAME}:/var/www/html/files \
         --restart always ${{ env.IMAGE_NAME }}:${GITHUB_REF_NAME}

        docker network connect monitoring $CNT_NAME
        docker network connect ${{ env.ENV }}_${{ env.ENV }} $CNT_NAME
        
  notifications:
    uses: terebei/base-cicd/.github/workflows/notify.yml@main
    needs: setup-build-publish-deploy
